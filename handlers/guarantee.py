from aiogram import Router, F, types, Bot
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from services.pdf_generator import generate_guarantee_certificate
# from services.receipt_analyzer import analyze_receipt
from services.receipt_analyzer import receipt_analyzer
from services.google_sheets import GoogleSheetsClient  # add_guarantee_request
from config import load_config
import os
import logging

router = Router()
config = load_config()
logger = logging.getLogger(__name__)


class GuaranteeStates(StatesGroup):
    waiting_product_link = State()
    waiting_device_type = State()
    waiting_contact = State()
    waiting_receipt = State()


@router.message(F.text == "‚úÖ –ü–æ–ª—É—á–∏—Ç—å +2 –≥–æ–¥–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏")
async def start_guarantee(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≤–æ—Ä–æ–Ω–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏"""
    await state.clear()
    await message.answer(
        "üõ†Ô∏è <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏ +2 –≥–æ–¥–∞</b>\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Ozon –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>https://www.ozon.ru/product/12345678/</code>",
        parse_mode="HTML",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(GuaranteeStates.waiting_product_link)


@router.message(GuaranteeStates.waiting_product_link, F.text)
async def process_product_link(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä"""
    if not any(domain in message.text for domain in ["ozon.ru/product/", "ozon.ru/category/"]):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É Ozon. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    await state.update_data(product_link=message.text)

    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üì± Android"),
        types.KeyboardButton(text="üçè iOS"),
        types.KeyboardButton(text="üíª –ü–ö")
    )
    builder.row(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))

    await message.answer(
        "üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b>\n"
        "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –≥–∞—Ä–∞–Ω—Ç–∏–∏:",
        parse_mode="HTML",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(GuaranteeStates.waiting_device_type)


@router.message(GuaranteeStates.waiting_device_type, F.text.in_(["üì± Android", "üçè iOS", "üíª –ü–ö"]))
async def process_device_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    await state.update_data(device_type=message.text)
    await message.answer(
        "üìû <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n\n"
        "–§–æ—Ä–º–∞—Ç: <code>–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ +79001234567</code>\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏:",
        parse_mode="HTML",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(GuaranteeStates.waiting_contact)


@router.message(GuaranteeStates.waiting_contact, F.text)
async def process_contact(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        name, phone = message.text.rsplit(maxsplit=1)
        if not phone.startswith("+"):
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ: <code>–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ +79001234567</code>", parse_mode="HTML")
        return

    await state.update_data(client_name=name, client_phone=phone)
    await message.answer(
        "üßæ <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ –ø–æ–∫—É–ø–∫–µ</b>\n\n"
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ –≤–∏–¥–Ω—ã:\n"
        "- –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏\n"
        "- –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
        "- –ê—Ä—Ç–∏–∫—É–ª",
        parse_mode="HTML"
    )
    await state.set_state(GuaranteeStates.waiting_receipt)


@router.message(GuaranteeStates.waiting_receipt, F.photo)
async def process_receipt_photo(
    message: types.Message,
    state: FSMContext,
    bot: Bot
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞"""
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        file = await bot.get_file(file_id)
        receipt_path = f"temp/receipt_{message.from_user.id}.jpg"
        await bot.download_file(file.file_path, receipt_path)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ–∫
        receipt_data = await receipt_analyzer(receipt_path)
        if not receipt_data:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ–∫")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        user_data = await state.get_data()
        purchase_date = datetime.strptime(receipt_data.purchase_date, "%d.%m.%Y")
        warranty_end = (purchase_date + timedelta(days=365*2)).strftime("%d.%m.%Y")
        order_id = f"{message.from_user.id}-{datetime.now().strftime('%Y%m%d')}"
        promo_code = f"SUNDER-{order_id}"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        pdf_data = {
            "order_id": order_id,
            "client_name": user_data['client_name'],
            "product_name": receipt_data.product_name,
            "purchase_date": receipt_data.purchase_date,
            "warranty_end": warranty_end
        }
        pdf_path = generate_guarantee_certificate(pdf_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        await GoogleSheetsClient({
            "name": user_data['client_name'],
            "phone": user_data['client_phone'],
            "product_link": user_data['product_link'],
            "article": receipt_data.article,
            "product_name": receipt_data.product_name,
            "purchase_date": receipt_data.purchase_date,
            "warranty_end": warranty_end,
            "promo_code": promo_code,
            "status": "completed"
        })

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(pdf_path, 'rb') as pdf_file:
            await message.answer_document(
                pdf_file,
                caption=f"‚úÖ <b>–ì–∞—Ä–∞–Ω—Ç–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
                       f"üîπ –¢–æ–≤–∞—Ä: {receipt_data.product_name}\n"
                       f"üîπ –ì–∞—Ä–∞–Ω—Ç–∏—è –¥–æ: {warranty_end}\n\n"
                       f"üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 15% —Å–∫–∏–¥–∫—É:</b> <code>{promo_code}</code>",
                parse_mode="HTML"
            )

        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ Ozon:\n"
            f"{user_data['product_link']}#comments"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
        )
    finally:
        await state.clear()
        if os.path.exists(receipt_path):
            os.remove(receipt_path)


@router.message(StateFilter(GuaranteeStates), F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_guarantee(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏"""
    await state.clear()
    await message.answer(
        "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=types.ReplyKeyboardRemove()
    )
