from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from services.google_sheets import GoogleSheetsService
from services.receipt_analyzer import DeepSeekAnalyzer
from services.pdf_generator import PDFGenerator
from config import load_config
from datetime import datetime, timedelta
import os
import logging
# from typing import Dict, Optional

logger = logging.getLogger(__name__)
config = load_config()


class GuaranteeStates(StatesGroup):
    waiting_for_link = State()
    waiting_for_device = State()
    waiting_for_contact = State()
    waiting_for_receipt = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
google_sheets = GoogleSheetsService(config.google_sheets_credentials)
pdf_generator = PDFGenerator()


def get_device_keyboard() -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["Android", "iOS", "–ü–ö", "–û—Ç–º–µ–Ω–∞"]
    keyboard.add(*buttons)
    return keyboard


def get_cancel_keyboard() -> types.ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–û—Ç–º–µ–Ω–∞")
    return keyboard


async def start_guarantee(message: types.Message):
    """
    –ù–∞—á–∞–ª–æ –≤–æ—Ä–æ–Ω–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
    """
    await message.answer(
        "üõ°Ô∏è <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏ +2 –≥–æ–¥–∞</b>\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –Ω–∞ Ozon –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>https://www.ozon.ru/product/12345678/</code>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    await GuaranteeStates.waiting_for_link.set()


async def process_link(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä
    """
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_process(message, state)
        return

    if not ("ozon.ru/product/" in message.text or "ozon.ru/category/" in message.text):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É Ozon. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(product_link=message.text)

    await message.answer(
        "üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b>\n"
        "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –≥–∞—Ä–∞–Ω—Ç–∏–∏:",
        parse_mode="HTML",
        reply_markup=get_device_keyboard()
    )
    await GuaranteeStates.waiting_for_device.set()


async def process_device(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    """
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_process(message, state)
        return

    if message.text not in ["Android", "iOS", "–ü–ö"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
        return

    await state.update_data(device=message.text)

    await message.answer(
        "üìû <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n\n"
        "–§–æ—Ä–º–∞—Ç: <code>–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ +79001234567</code>\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    await GuaranteeStates.waiting_for_contact.set()


async def process_contact(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_process(message, state)
        return

    try:
        name, phone = message.text.rsplit(maxsplit=1)
        if not phone.startswith("+"):
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ:")
        return

    await state.update_data(client_name=name, client_phone=phone)

    await message.answer(
        "üßæ <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ –ø–æ–∫—É–ø–∫–µ</b>\n\n"
        "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.\n"
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∏–¥–Ω—ã:\n"
        "- –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏\n"
        "- –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
        "- –ê—Ä—Ç–∏–∫—É–ª",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    await GuaranteeStates.waiting_for_receipt.set()


async def process_receipt_photo(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞ —á–µ—Ä–µ–∑ DeepSeek API
    """
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞:")
        return

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        file = await message.bot.get_file(file_id)
        file_path = f"temp/receipt_{message.from_user.id}.jpg"
        await file.download(destination_file=file_path)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ–∫
        analyzer = DeepSeekAnalyzer(config.deepseek_api_key)
        receipt_data = await analyzer.analyze_receipt(file_path)

        if not receipt_data:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ–∫")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
        user_data = await state.get_data()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ (+2 –≥–æ–¥–∞)
        purchase_date = datetime.strptime(receipt_data.purchase_date, "%d.%m.%Y")
        warranty_end = (purchase_date + timedelta(days=365*2)).strftime("%d.%m.%Y")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        promo_code = f"SUNDER-{message.from_user.id}-{purchase_date.strftime('%Y%m')}"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≥–∞—Ä–∞–Ω—Ç–∏–∏
        pdf_data = {
            "client_name": user_data['client_name'],
            "product_name": receipt_data.product_name,
            "purchase_date": receipt_data.purchase_date,
            "warranty_end": warranty_end,
            "order_id": f"{message.from_user.id}-{datetime.now().strftime('%Y%m%d')}"
        }
        pdf_path = pdf_generator.generate_guarantee_certificate(pdf_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
        await google_sheets.add_guarantee_request({
            "name": user_data['client_name'],
            "phone": user_data['client_phone'],
            "product_link": user_data['product_link'],
            "article": receipt_data.article,
            "product_name": receipt_data.product_name,
            "purchase_date": receipt_data.purchase_date,
            "warranty_end": warranty_end,
            "promo_code": promo_code,
            "status": "completed"
        })

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open(pdf_path, 'rb') as pdf_file:
            await message.answer_document(
                pdf_file,
                caption="‚úÖ <b>–í–∞—à–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
                        f"üîπ –¢–æ–≤–∞—Ä: {receipt_data.product_name}\n"
                        f"üîπ –ì–∞—Ä–∞–Ω—Ç–∏—è –¥–æ: {warranty_end}\n\n"
                        f"üéÅ <b>–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É 15%:</b> <code>{promo_code}</code>\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
                parse_mode="HTML"
            )

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ Ozon:\n"
            f"{user_data['product_link']}#comments",
            reply_markup=types.ReplyKeyboardRemove()
        )

    except Exception as e:
        logger.error(f"Error processing receipt: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
            reply_markup=get_cancel_keyboard()
        )
    finally:
        # –û—á–∏—â–∞–µ–º state
        await state.finish()
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(file_path):
            os.remove(file_path)


async def cancel_process(message: types.Message, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    """
    await message.answer(
        "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.finish()


def register_guarantee_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏
    """
    dp.register_message_handler(
        start_guarantee,
        text="‚úÖ –ü–æ–ª—É—á–∏—Ç—å +2 –≥–æ–¥–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        state="*"
    )
    dp.register_message_handler(
        process_link,
        state=GuaranteeStates.waiting_for_link
    )
    dp.register_message_handler(
        process_device,
        state=GuaranteeStates.waiting_for_device
    )
    dp.register_message_handler(
        process_contact,
        state=GuaranteeStates.waiting_for_contact
    )
    dp.register_message_handler(
        process_receipt_photo,
        content_types=types.ContentType.PHOTO,
        state=GuaranteeStates.waiting_for_receipt
    )
    dp.register_message_handler(
        cancel_process,
        text="–û—Ç–º–µ–Ω–∞",
        state="*"
    )
